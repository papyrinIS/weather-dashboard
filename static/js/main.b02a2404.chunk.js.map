{"version":3,"sources":["API/API.js","Redux/Reducer.js","Components/WeatherDashboard.js","App.js","Redux/Redux-store.js","index.js"],"names":["instance","axios","create","baseURL","getWeatherAPI","city","get","then","res","data","initState","dashboards","error","getCityAC","type","errorAC","Dashboard","styled","div","City","Temp","ButtonBlock","Button","button","WeatherDashboard","mainWeather","icon","useSelector","state","Reducer","dispatch","useDispatch","deleteDashboard","useCallback","newDashboards","filter","f","name","deleteDashboardAC","onClick","Math","round","temp","alt","src","BodyApp","AppForm","AppError","IsEmpty","Dashboards","App","useEffect","a","promise","dashboard","Promise","all","getWeatherThunk","useState","valueInput","setValueInput","addCity","clearInput","map","m","key","weather","main","setTimeout","value","onChange","e","currentTarget","replace","placeholder","length","reducers","combineReducers","action","store","createStore","localStorage","JSON","parse","applyMiddleware","thunkMiddleware","subscribe","stringify","getState","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b02a2404.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/weather?`\r\n});\r\n\r\nexport const getWeatherAPI = {\r\n    getWeather(city) {\r\n        return instance.get(`&q=${city}&APPID=dcca529665a37812e85088afd3957d4d&units=metric&SameSite=None`).then(res => res.data)\r\n    }\r\n}\r\n","import {getWeatherAPI} from \"../API/API\";\r\n\r\nconst GET_WEATHER = 'GET_WEATHER'\r\nconst CITY = 'CITY'\r\nexport const DELETE_DASHBOARD = 'DELETE_DASHBOARD'\r\nconst ERROR = 'ERROR'\r\n\r\n\r\nexport const initState = {\r\n    dashboards: [],\r\n    city: '',\r\n    error: false\r\n}\r\n\r\n\r\nexport const Reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {\r\n                ...state,\r\n                dashboards: [...state.dashboards, action.dashboard]\r\n            }\r\n        case CITY:\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            }\r\n        case DELETE_DASHBOARD:\r\n            return {\r\n                ...state,\r\n                dashboards: [...action.newDashboards]\r\n            }\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getWeatherAC = (dashboard) => ({type: GET_WEATHER, dashboard})\r\nexport const getCityAC = (city) => ({type: CITY, city})\r\nexport const deleteDashboardAC = (newDashboards) => ({type: DELETE_DASHBOARD, newDashboards})\r\nexport const errorAC = (error) => ({type: ERROR, error})\r\n\r\n\r\nexport const getWeatherThunk = (city) => async (dispatch) => {\r\n    try {\r\n        let data = await getWeatherAPI.getWeather(city)\r\n        let promise = dispatch(getWeatherAC(data))\r\n        Promise.all([promise]).then(() => {\r\n            dispatch(getCityAC(''))\r\n        })\r\n    } catch (e) {\r\n        dispatch(getCityAC(''))\r\n        dispatch(errorAC(true))\r\n    }\r\n}","import React, {useCallback} from \"react\";\r\nimport { useDispatch, useSelector} from \"react-redux\";\r\nimport { deleteDashboardAC} from \"../Redux/Reducer\";\r\nimport styled from \"styled-components\"\r\n\r\nconst Dashboard = styled.div`\r\n      width: 200px;\r\n      height: 250px;\r\n      background: #61dafb;\r\n      display: flex;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      margin: 10px;\r\n      transition:5s ease;\r\n      &:hover{\r\n      Button{\r\n      opacity: 1;\r\n      visibility: visible;\r\n      }\r\n      }\r\n`\r\nconst City =styled.div`\r\nfont-size: 35px;\r\n        margin: 5px;\r\n`\r\nconst Temp =styled.div`\r\nfont-size: 30px;    \r\n`\r\nconst ButtonBlock = styled.div`\r\n        position: relative;\r\n        bottom: 25px;\r\n        left: 60px;\r\n        width: 100px;\r\n        height: 40px;\r\n`\r\nconst Button=styled.button`\r\n        font-size: 19px;\r\n        padding: 5px 10px;\r\n        color: red;\r\n        border-radius: 10px;\r\n        border: 2px solid red;\r\n        background: transparent;\r\n        font-weight: bold;\r\n        transition:.5s ease-in;\r\n           &:hover {\r\n          cursor: pointer;\r\n           }\r\n           opacity: 0;\r\n           visibility: hidden;\r\n`\r\n\r\n\r\nexport const WeatherDashboard = ({mainWeather, city, icon}) => {\r\n    const dashboards = useSelector(state=>state.Reducer.dashboards)\r\n    const dispatch =useDispatch()\r\n\r\n\r\n    const deleteDashboard =useCallback( () => {\r\n        let newDashboards = dashboards.filter(f => f.name !== city)\r\n        dispatch(deleteDashboardAC(newDashboards))\r\n    },[dispatch,dashboards,city])\r\n\r\n    return <Dashboard>\r\n        <ButtonBlock>\r\n             <Button onClick={deleteDashboard}>delete</Button>\r\n        </ButtonBlock>\r\n        <City>{city}</City>\r\n        <Temp>{Math.round(mainWeather.temp)}℃</Temp>\r\n        <img alt='icon' src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n    </Dashboard>\r\n}\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {errorAC, getCityAC, getWeatherThunk} from \"./Redux/Reducer\";\nimport {WeatherDashboard} from \"./Components/WeatherDashboard\";\nimport styled from \"styled-components\"\n\n\nconst BodyApp = styled.div`\ntext-align: center;\nmargin: auto;`;\n\nconst AppForm = styled.div`\n display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n    \n     & input {\n      height: 30px;\n      font-size: 25px;\n      padding-left: 5px;\n      width: 250px;\n    }\n    \n    & button {\n      margin-left: 10px;\n      font-size: 19px;\n      padding: 5px 10px;\n\n      &:hover {\n        cursor: pointer;\n      }`;\n\nconst AppError = styled.div`\n    height: 40px;\n    color: red;\n    font-size: 25px;\n`\nconst IsEmpty = styled.div`\n    font-size: 25px;\n    margin: 10px;\n`\nconst Dashboards = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\n\nexport const App = () => {\n\n    const dispatch = useDispatch()\n    const {dashboards, city, error} = useSelector(state => {\n        return {\n            dashboards: state.Reducer.dashboards,\n            city: state.Reducer.city,\n            error: state.Reducer.error\n        }\n    })\n\n    useEffect(() => {\n        if (city)\n            dispatch(getWeatherThunk(city))\n    }, [dispatch, city])\n\n\n    let [valueInput, setValueInput] = useState('')\n\n    const addCity = useCallback(() => {\n        dispatch(getCityAC(valueInput))\n    }, [dispatch, valueInput])\n\n\n    const clearInput = useCallback(\n        () => {\n            setValueInput('')\n        }, [setValueInput])\n\n    let dashboard = dashboards.map(m =>\n        <WeatherDashboard\n            key={m.name}\n            icon={m.weather[0].icon}\n            city={m.name}\n            mainWeather={m.main}/>\n    )\n\n    if (error) {\n        setTimeout(() => dispatch(errorAC(false)), 3000)\n    }\n    return (\n        <BodyApp>\n            <AppForm>\n                <input value={valueInput}\n                       onChange={(e) => {\n                           setValueInput(e.currentTarget.value.replace(/^[а-яА-Я]+$/, ''))\n                       }}\n                       placeholder=\"search\"/>\n\n                <button onClick={addCity}>add</button>\n\n                <button onClick={clearInput}>Clear</button>\n            </AppForm>\n            <AppError>{error && <span>city not found</span>}</AppError>\n            {dashboards.length === 0 && (\n                <IsEmpty>Dashboard is empty</IsEmpty>\n            )}\n\n            <Dashboards>\n                {dashboard}\n            </Dashboards>\n\n        </BodyApp>\n    );\n}\n\n\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {initState, Reducer} from \"./Reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    Reducer:Reducer\r\n})\r\n\r\nconst store = createStore(reducers,\r\n    (localStorage['weather'])\r\n        ?JSON.parse(localStorage['weather'])\r\n        :{}\r\n        ,applyMiddleware(thunkMiddleware))\r\n\r\nstore.subscribe(() => {\r\nif(localStorage['weather'])\r\n    localStorage['weather'] = JSON.stringify(store.getState())\r\nelse\r\n    localStorage['weather'] = JSON.stringify(initState)\r\n});\r\n\r\nwindow.store = store;\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/Redux-store\"\n\nReactDOM.render(\n    <Provider store={store}>\n            <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}