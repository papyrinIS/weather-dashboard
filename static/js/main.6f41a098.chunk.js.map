{"version":3,"sources":["API/API.ts","Redux/Reducer.ts","Styles/StyleDashBoard.ts","Components/WeatherDashboard.tsx","Styles/StyleApp.ts","App.tsx","Redux/Redux-store.ts","index.tsx"],"names":["instance","axios","create","baseURL","getWeatherAPI","city","get","then","res","data","initState","dashboards","error","actions","dashboard","type","newDashboards","DashboardBlock","styled","div","City","Temp","ButtonBlock","Button","button","Dashboard","name","useSelector","state","Reducer","dispatch","useDispatch","deleteDashboard","useCallback","filter","f","onClick","Math","round","main","temp","alt","src","weather","icon","BodyApp","AppForm","AppError","IsEmpty","Dashboards","TransitionGroup","App","useEffect","a","promise","Promise","all","getWeatherThunk","useState","valueInput","setValueInput","addCity","clearInput","WeatherElements","map","m","CSSTransition","classNames","timeout","key","setTimeout","value","onChange","e","currentTarget","replace","placeholder","length","rootReducer","combineReducers","action","store","createStore","localStorage","JSON","parse","applyMiddleware","thunk","subscribe","stringify","getState","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f41a098.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `https://api.openweathermap.org/data/2.5/`\r\n});\r\n\r\nexport const getWeatherAPI = {\r\n    getWeather(city: string) {\r\n        return instance.get<WeatherResType>(`weather?q=${city}&appid=dcca529665a37812e85088afd3957d4d&units=metric`)\r\n            .then(res => res.data)\r\n    }\r\n}\r\n\r\nexport type WeatherResType = {\r\n    coord: { lon: number, lat: number },\r\n    weather: [\r\n        {\r\n            id: number\r\n            main: string\r\n            description: string,\r\n            icon: string\r\n        }\r\n    ],\r\n    base: string\r\n    main: {\r\n        temp: number\r\n        feels_like: number\r\n        temp_min: number\r\n        temp_max: number\r\n        pressure: number\r\n        humidity: number\r\n    },\r\n    wind: {\r\n        speed: number\r\n        deg: number\r\n    },\r\n    clouds: {\r\n        all: number\r\n    },\r\n    dt: number\r\n    sys: {\r\n        \"type\": number\r\n        id: number\r\n        message: number\r\n        country: string,\r\n        sunrise: number,\r\n        sunset: number\r\n    },\r\n    timezone: number\r\n    id: number\r\n    name: string\r\n    cod: number\r\n}","import {getWeatherAPI, WeatherResType} from \"../API/API\"\r\nimport {InferActionsTypes, BaseThunkType} from \"./Redux-store\";\r\n\r\nconst GET_WEATHER = 'GET_WEATHER'\r\nconst GET_CITY = 'GET_CITY'\r\nconst DELETE_DASHBOARD = 'DELETE_DASHBOARD'\r\nconst ERROR = 'ERROR'\r\n\r\nexport let initState = {\r\n    dashboards: [] as Array<WeatherResType>,\r\n    city: '',\r\n    error: false\r\n}\r\n\r\n\r\nexport const Reducer = (state = initState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {\r\n                ...state,\r\n                dashboards: [...state.dashboards, action.dashboard]\r\n            }\r\n        case GET_CITY:\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            }\r\n        case DELETE_DASHBOARD:\r\n            return {\r\n                ...state,\r\n                dashboards: [...action.newDashboards]\r\n            }\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    getWeatherAC: (dashboard: WeatherResType) => ({type: GET_WEATHER, dashboard} as const),\r\n    getCityAC: (city: string) => ({type: GET_CITY, city} as const),\r\n    deleteDashboardAC: (newDashboards: Array<WeatherResType>) => ({type: DELETE_DASHBOARD, newDashboards} as const),\r\n    errorAC: (error: boolean) => ({type: ERROR, error} as const)\r\n}\r\n\r\n\r\nexport const getWeatherThunk = (city: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await getWeatherAPI.getWeather(city)\r\n        let promise = dispatch(actions.getWeatherAC(data))\r\n        Promise.all([promise]).then(() => {\r\n            dispatch(actions.getCityAC(''))\r\n\r\n        })\r\n    } catch (e) {\r\n        dispatch(actions.getCityAC(''))\r\n        dispatch(actions.errorAC(true))\r\n    }\r\n}\r\n\r\n\r\ntype InitialStateType = typeof initState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>","import styled from \"styled-components\";\r\n\r\nexport const DashboardBlock = styled.div`\r\n      width: 200px;\r\n      height: 250px;\r\n      background: #61dafb;\r\n      display: flex;\r\n      justify-content: center;\r\n      flex-direction: column;\r\n      align-items: center;\r\n      margin: 10px;\r\n      transition:0.5s ease;\r\n      border:1px solid #009afb;\r\n      box-shadow: 5px 5px 5px 2px #007577 ;\r\n      &:hover{\r\n      Button{\r\n      opacity: 1;\r\n      visibility: visible;\r\n      }\r\n      }\r\n`\r\nexport const City = styled.div`\r\nfont-size: 35px;\r\n        margin: 5px;\r\n`\r\nexport const Temp = styled.div`\r\nfont-size: 30px;    \r\n`\r\nexport const ButtonBlock = styled.div`\r\n        position: relative;\r\n        bottom: 25px;\r\n        left: 60px;\r\n        width: 100px;\r\n        height: 40px;\r\n`\r\nexport const Button = styled.button`\r\n        font-size: 19px;\r\n        padding: 5px 10px;\r\n        color: red;\r\n        border-radius: 10px;\r\n        border: 2px solid red;\r\n        background: transparent;\r\n        font-weight: bold;\r\n        transition:.5s ease-in;\r\n           &:hover {\r\n          cursor: pointer;\r\n           }\r\n           opacity: 0;\r\n           visibility: hidden;\r\n`","import React, {useCallback} from \"react\";\r\nimport {WeatherResType} from \"../API/API\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/Redux-store\";\r\nimport {actions} from \"../Redux/Reducer\";\r\nimport {ButtonBlock, DashboardBlock, Button, Temp, City} from \"../Styles/StyleDashBoard\";\r\n\r\n\r\ntype PropsType = {\r\n    dashboard: WeatherResType\r\n}\r\n\r\nexport const Dashboard: React.FC<PropsType> = ({dashboard}) => {\r\n    const city = dashboard.name\r\n    const dashboards = useSelector<AppStateType, Array<WeatherResType>>((state) => state.Reducer.dashboards)\r\n    const dispatch = useDispatch()\r\n\r\n    const deleteDashboard = useCallback(() => {\r\n        let newDashboards = dashboards.filter(f => f.name !== city)\r\n        dispatch(actions.deleteDashboardAC(newDashboards))\r\n    }, [dispatch, dashboards, city])\r\n\r\n\r\n    return <DashboardBlock>\r\n        <ButtonBlock>\r\n            <Button onClick={deleteDashboard}>delete</Button>\r\n        </ButtonBlock>\r\n        <City>{city}</City>\r\n        <Temp>{Math.round(dashboard.main.temp)}℃</Temp>\r\n        <img alt='icon' src={`http://openweathermap.org/img/wn/${dashboard.weather[0].icon}@2x.png`}/>\r\n    </DashboardBlock>\r\n}\r\n","import styled from \"styled-components\";\r\nimport {TransitionGroup} from \"react-transition-group\";\r\n\r\n\r\nexport const BodyApp = styled.div`\r\ntext-align: center;\r\nmargin: auto;`;\r\n\r\nexport const AppForm = styled.div`\r\n display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 20px;\r\n    \r\n     & input {\r\n      height: 30px;\r\n      font-size: 25px;\r\n      padding-left: 5px;\r\n      width: 250px;\r\n    }\r\n    \r\n    & button {\r\n      margin-left: 10px;\r\n      font-size: 19px;\r\n      padding: 5px 10px;\r\n\r\n      &:hover {\r\n        cursor: pointer;\r\n      }`;\r\n\r\nexport const AppError = styled.div`\r\n    height: 40px;\r\n    color: red;\r\n    font-size: 25px;\r\n`\r\nexport const IsEmpty = styled.div`\r\n    font-size: 25px;\r\n    margin: 10px;\r\n`\r\nexport const Dashboards = styled(TransitionGroup)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`","import React, {useCallback, useEffect, useState} from 'react';\nimport './App.css';\nimport {useDispatch, useSelector} from 'react-redux'\nimport {actions, getWeatherThunk} from \"./Redux/Reducer\";\nimport {AppStateType} from \"./Redux/Redux-store\";\nimport {WeatherResType} from \"./API/API\";\nimport {CSSTransition} from \"react-transition-group\"\nimport {Dashboard} from \"./Components/WeatherDashboard\";\nimport {AppError, AppForm, BodyApp, Dashboards, IsEmpty} from './Styles/StyleApp';\n\n\ntype PropsType = {}\n\n\nexport const App: React.FC<PropsType> = () => {\n    const dispatch = useDispatch()\n    const city = useSelector<AppStateType, string>((state) => state.Reducer.city)\n    const dashboards = useSelector<AppStateType, Array<WeatherResType>>(state => state.Reducer.dashboards)\n    const error = useSelector<AppStateType, boolean>(state => state.Reducer.error)\n\n    useEffect(() => {\n        if (city !== '')\n            dispatch(getWeatherThunk(city))\n    }, [dispatch, city])\n\n\n    let [valueInput, setValueInput] = useState('')\n\n    const addCity = useCallback(() => {\n        dispatch(actions.getCityAC(valueInput))\n    }, [dispatch, valueInput])\n\n\n    const clearInput = useCallback(\n        () => {\n            setValueInput('')\n        }, [setValueInput])\n\n\n    let WeatherElements = dashboards.map(m => <CSSTransition classNames=\"animate\" timeout={500} key={m.name}>\n        <Dashboard dashboard={m}/>\n    </CSSTransition>)\n\n    if (error) {\n        setTimeout(() => dispatch(actions.errorAC(false)), 3000)\n    }\n    return (\n        <BodyApp>\n            <AppForm>\n                <input value={valueInput}\n                       onChange={(e: React.SyntheticEvent<HTMLInputElement>) => {\n                           setValueInput(e.currentTarget.value.replace(/^[а-яА-Я]+$/, ''))\n                       }}\n                       placeholder=\"search\"/>\n\n                <button onClick={addCity}>add</button>\n\n                <button onClick={clearInput}>Clear</button>\n            </AppForm>\n            <AppError>{error && <span>city not found</span>}</AppError>\n            {dashboards.length === 0 && (\n                <IsEmpty>Dashboard is empty</IsEmpty>\n            )}\n\n            <Dashboards>\n                {WeatherElements}\n            </Dashboards>\n        </BodyApp>\n    );\n}\n\n\n","import {applyMiddleware, combineReducers, createStore, Action} from \"redux\";\r\nimport {initState, Reducer} from \"./Reducer\"\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\n\r\n\r\nconst rootReducer = combineReducers({Reducer})\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\nconst store = createStore(rootReducer,\r\n    (localStorage['weather'])\r\n        ? JSON.parse(localStorage['weather'])\r\n        : {}\r\n    , applyMiddleware(thunk))\r\n\r\n\r\nstore.subscribe(() => {\r\n    if (localStorage['weather'])\r\n        localStorage['weather'] = JSON.stringify(store.getState())\r\n    else\r\n        localStorage['weather'] = JSON.stringify(initState)\r\n});\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/Redux-store\"\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}