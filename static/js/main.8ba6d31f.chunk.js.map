{"version":3,"sources":["API/API.js","Redux/Reducer.js","Components/WeatherDashboard.js","App.js","Redux/Redux-store.js","index.js"],"names":["instance","axios","create","baseURL","headers","getWeatherAPI","city","get","then","res","data","initState","dashboards","error","getCityAC","type","errorAC","connect","state","Reducer","deleteDashboardAC","newDashboards","mainWeather","icon","React","useState","showButton","setShowButton","onMouseEnter","onMouseLeave","className","onClick","filter","f","name","Math","round","temp","alt","src","getWeatherThunk","dispatch","a","promise","dashboard","Promise","all","useEffect","valueInput","setValueInput","map","m","CSSTransition","classNames","key","timeout","weather","main","setTimeout","value","onChange","e","currentTarget","replace","placeholder","length","TransitionGroup","reducers","combineReducers","action","store","createStore","localStorage","JSON","parse","applyMiddleware","thunkMiddleware","subscribe","stringify","getState","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ba6d31f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: `http://api.openweathermap.org/data/2.5/weather?`,\r\n    headers: {\r\n        \"API-KEY\": \"dcca529665a37812e85088afd3957d4d\"\r\n    }\r\n});\r\n\r\nexport const getWeatherAPI = {\r\n    getWeather(city) {\r\n        return instance.get(`&q=${city}&APPID=dcca529665a37812e85088afd3957d4d&units=metric&SameSite=None`).then(res => res.data)\r\n    }\r\n}\r\n","import {getWeatherAPI} from \"../API/API\";\r\n\r\nconst GET_WEATHER = 'GET_WEATHER'\r\nconst CITY = 'CITY'\r\nconst DELETE_DASHBOARD = 'DELETE_DASHBOARD'\r\nconst ERROR = 'ERROR'\r\n\r\n\r\nexport const initState = {\r\n    dashboards: [],\r\n    city: '',\r\n    error: false\r\n}\r\n\r\n\r\nexport const Reducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case GET_WEATHER:\r\n            return {\r\n                ...state,\r\n                dashboards: [...state.dashboards, action.dashboard]\r\n            }\r\n        case CITY:\r\n            return {\r\n                ...state,\r\n                city: action.city\r\n            }\r\n        case DELETE_DASHBOARD:\r\n            return {\r\n                ...state,\r\n                dashboards: [...action.newDashboards]\r\n            }\r\n        case ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getWeatherAC = (dashboard) => ({type: GET_WEATHER, dashboard})\r\nexport const getCityAC = (city) => ({type: CITY, city})\r\nexport const deleteDashboardAC = (newDashboards) => ({type: DELETE_DASHBOARD, newDashboards})\r\nexport const errorAC = (error) => ({type: ERROR, error})\r\n\r\n\r\nexport const getWeatherThunk = (city) => async (dispatch) => {\r\n    try {\r\n        let data = await getWeatherAPI.getWeather(city)\r\n        let promise = dispatch(getWeatherAC(data))\r\n        Promise.all([promise]).then(() => {\r\n            dispatch(getCityAC(''))\r\n        })\r\n    } catch (e) {\r\n        dispatch(getCityAC(''))\r\n        dispatch(errorAC(true))\r\n    }\r\n}","import React from \"react\";\r\nimport \"../Styles/WeatherDashboard.scss\"\r\nimport {connect} from \"react-redux\";\r\nimport {deleteDashboardAC} from \"../Redux/Reducer\";\r\n\r\n\r\nexport const WeatherDashboard = ({dashboards, mainWeather, city, icon, deleteDashboardAC}) => {\r\n    const deleteDashboard = () => {\r\n        let newDashboards = dashboards.filter(f => f.name !== city)\r\n        deleteDashboardAC(newDashboards)\r\n    }\r\n    const [showButton, setShowButton] = React.useState(false)\r\n    return <div onMouseEnter={() => setShowButton(true)}\r\n                onMouseLeave={() => setShowButton(false)}\r\n                className='dashboard'>\r\n        <div className=\"dashboard__button\">{showButton && <button onClick={deleteDashboard}>delete</button>}</div>\r\n        <div className=\"dashboard__city\">{city}</div>\r\n        <div className=\"dashboard__temp\">{Math.round(mainWeather.temp)}℃</div>\r\n        <img alt='icon' src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dashboards: state.Reducer.dashboards\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {deleteDashboardAC})(WeatherDashboard)","import React, {useEffect, useState} from 'react';\nimport './Styles/WeatherDashboard.scss'\nimport {connect} from \"react-redux\";\nimport {errorAC, getCityAC, getWeatherThunk} from \"./Redux/Reducer\";\nimport WeatherDashboard from \"./Components/WeatherDashboard\";\nimport {CSSTransition, TransitionGroup} from \"react-transition-group\";\n\nconst App = ({dashboards, getWeatherThunk, getCityAC, city, error, errorAC}) => {\n    useEffect(() => {\n        if (city)\n            getWeatherThunk(city)\n    }, [getWeatherThunk, city])\n\n\n    let [valueInput, setValueInput] = useState('')\n    const addCity = () => getCityAC(valueInput)\n    const clearInput = () => setValueInput('')\n\n    let dashboard = dashboards.map(m =>\n        <CSSTransition classNames=\"option\" key={m.name} timeout={1000}>\n            <WeatherDashboard\n                icon={m.weather[0].icon}\n                city={m.name}\n                mainWeather={m.main}/>\n        </CSSTransition>)\n\n    if (error) {\n        setTimeout(() => errorAC(false), 3000)\n    }\n    return (\n        <div className=\"App\">\n            <div className=\"App__form\">\n                <input value={valueInput}\n                       onChange={(e) => {\n                           setValueInput(e.currentTarget.value.replace(/^[а-яА-Я]+$/, ''))\n                       }}\n                       placeholder=\"search\"/>\n\n                <button onClick={addCity}>add</button>\n\n                <button onClick={clearInput}>Clear</button>\n            </div>\n            <div className=\"App__error\">{error && <span>city not found</span>}</div>\n            {dashboards.length === 0 && (\n                <div className=\"App__isEmpty\">Dashboard is empty</div>\n            )}\n            <div>\n                <TransitionGroup className=\"dashboards\">\n                    {dashboard}\n                </TransitionGroup>\n            </div>\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        dashboards: state.Reducer.dashboards,\n        city: state.Reducer.city,\n        error: state.Reducer.error\n    }\n}\n\nexport default connect(mapStateToProps, {getWeatherThunk, getCityAC, errorAC})(App)\n\n\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {initState, Reducer} from \"./Reducer\";\r\n\r\n\r\nlet reducers = combineReducers({\r\n    Reducer:Reducer\r\n})\r\n\r\nconst store = createStore(reducers,\r\n    (localStorage['weather'])\r\n        ?JSON.parse(localStorage['weather'])\r\n        :{}\r\n        ,applyMiddleware(thunkMiddleware))\r\n\r\nstore.subscribe(() => {\r\nif(localStorage['weather'])\r\n    localStorage['weather'] = JSON.stringify(store.getState())\r\nelse\r\n    localStorage['weather'] = JSON.stringify(initState)\r\n});\r\n\r\nwindow.store = store;\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/Redux-store\"\n\nReactDOM.render(\n    <Provider store={store}>\n\n            <App/>\n\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}